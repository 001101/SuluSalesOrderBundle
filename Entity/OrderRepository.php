<?php

namespace Sulu\Bundle\Sales\OrderBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends EntityRepository
{
    /**
     * @param $id
     * @return Order|null
     */
    public function findById($id)
    {
        try {
            $qb = $this->createQueryBuilder('o')
                ->andWhere('o.id = :orderId')
                ->setParameter('orderId', $id);

            return $qb->getQuery()->getSingleResult();
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * @param $id
     * @return Order|null
     */
    public function findOrderForItemWithId($id, $multipleResults = false)
    {
        try {
            $qb = $this->createQueryBuilder('o')
                ->join('o.items', 'items')
                ->where('items.id = :id')
                ->setParameter('id', $id);

            $query = $qb->getQuery();
            
            if (!$multipleResults) {
                return $query->getSingleResult();
            } else {
                return $query->getResult();
            }
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * Returns all orders in the given locale
     * @param string $locale The locale of the order to load
     * @return Order[]|null
     */
    public function findAllByLocale($locale)
    {
        try {
            return $this->getOrderQuery($locale)->getQuery()->getResult();
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * Returns all orders and filters them
     * @param $locale
     * @param array $filter
     * @return Order[]|null
     */
    public function findByLocaleAndFilter($locale, array $filter)
    {
        try {
            $qb = $this->getOrderQuery($locale);

            foreach ($filter as $key => $value) {
                switch ($key) {
                    case 'status':
                        $qb->andWhere('status.id = :' . $key);
                        $qb->setParameter($key, $value);
                        break;
                }
            }

            $query = $qb->getQuery();
            return $query->getResult();
        } catch (NoResultException $ex) {
            return null;
        }
    }

    /**
     * Finds an order by id and locale
     * @param $id
     * @param $locale
     * @return Order|null
     */
    public function findByIdAndLocale($id, $locale)
    {
        try {
            $qb = $this->getOrderQuery($locale);
            $qb->andWhere('o.id = :orderId');
            $qb->setParameter('orderId', $id);

            return $qb->getQuery()->getSingleResult();
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * Finds orders by statusId and user
     *
     * @param $statusId
     * @param $user
     *
     * @return array|null
     */
    public function findByStatusIdAndUser($locale, $statusId, $user)
    {
        try {
            $qb = $this->getOrderQuery($locale)
                ->andWhere('o.creator = :user')
                ->setParameter('user', $user)
                ->andWhere('status.id = :statusId')
                ->setParameter('statusId', $statusId)
                ->orderBy('o.created', 'DESC');
            
            // TODO use expiryDate

            return $qb->getQuery()->getResult();
        } catch (NoResultException $exc) {
            return null;
        }
    }

    /**
     * Returns query for orders
     * @param string $locale The locale to load
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function getOrderQuery($locale)
    {
        $qb = $this->createQueryBuilder('o')
            ->leftJoin('o.deliveryAddress', 'deliveryAddress')
            ->leftJoin('o.invoiceAddress', 'invoiceAddress')
            ->leftJoin('o.status', 'status')
            ->leftJoin('status.translations', 'statusTranslations', 'WITH', 'statusTranslations.locale = :locale')
            ->leftJoin('o.items', 'items')
            ->setParameter('locale', $locale);
        return $qb;
    }
}
